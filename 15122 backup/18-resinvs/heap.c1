/*
 * Bounded priority queues, implemented as heaps
 *
 * 15-122 Principles of Imperative Computation */

#use <util>
#use <conio>

/*********************/
/* Client interface  */
/*********************/

typedef void* elem;

// f(e1,e2) returns true if e1 has STRICTLY higher priority than e2
typedef bool has_higher_priority_fn(elem e1, elem e2);

typedef void elem_print_fn(elem e);


/**************************/
/* Library implementation */
/**************************/

typedef struct heap_header heap;
struct heap_header {
  int limit;                      // limit = capacity+1
  elem[] data;                    // \length(data) == limit
  int next;                       // 1 <= next && next <= limit
  has_higher_priority_fn* prior;  // != NULL
  elem_print_fn* print;           // != NULL
};

bool is_array_expected_length(elem[] A, int length) {
  //@assert \length(A) == length;
  return true;
}

/* Just checks the basic invariants described above, none
 * of the ordering invariants. */
bool is_heap_safe(heap* H) {
  return H != NULL
      && 1 < H->limit && H->limit <= int_max()/2      // to prevent overflow
      && is_array_expected_length(H->data, H->limit)
      && 1 <= H->next && H->next <= H->limit
      && H->prior != NULL;
}


/****** Utility functions ******/

/* Returns true if the element in H->data[i1] can
 * correctly be placed above H->data[i2] in the heap. */
bool ok_above(heap* H, int i1, int i2)
//@requires is_heap_safe(H);
//@requires 1 <= i1 && i1 < H->next;
//@requires 1 <= i2 && i2 < H->next;
{
  elem e1 = H->data[i1];
  elem e2 = H->data[i2];
  return !(*H->prior)(e2, e1);
}

/* Swaps H->data[child] with its parent at child/2. */
void swap_up(heap* H, int child)
//@requires is_heap_safe(H);
//@requires 2 <= child && child < H->next;
//@requires !ok_above(H, child/2, child);  // parent == child/2
//@ensures ok_above(H, child/2, child);
{
  int parent = child/2;
  elem tmp        = H->data[child];
  H->data[child]  = H->data[parent];
  H->data[parent] = tmp;
}


/****** Data structure invariants ******/

bool is_heap_ordered(heap* H)
//@requires is_heap_safe(H);
{
  for (int child = 2; child < H->next; child++)
  //@loop_invariant 2 <= child;
  {
    int parent = child/2;
    if (!ok_above(H, parent, child)) return false;
  }

  return true;
}

bool is_heap(heap* H) {
  return is_heap_safe(H)
      && is_heap_ordered(H);
}


/****** Partial invariants ******/

/* Valid heap except at excpt, looking up the tree */
bool is_heap_except_up(heap* H, int excpt)
//@requires is_heap_safe(H);
//@requires 1 <= excpt && excpt < H->next;
{
  for (int child = 2; child < H->next; child++)
  //@loop_invariant 2 <= child;
  {
    int parent = child/2;
    if (!(child == excpt ||     // Allowed exception
          ok_above(H, parent, child))) return false;
  }

  return true;
}

/* Valid heap except at excpt, looking down the tree */
bool is_heap_except_down(heap* H, int excpt)
//@requires is_heap_safe(H);
//@requires 1 <= excpt && excpt < H->next;
{
  for (int child = 2; child < H->next; child++)
  //@loop_invariant 2 <= child;
  {
    int parent = child/2;
    if (!(parent == excpt ||    // Allowed exception
          ok_above(H, parent, child))) return false;
  }

  return true;
}

bool grandparent_check(heap* H, int i)
//@requires is_heap_safe(H);
//@requires 1 <= i && i < H->next;
{
  int left  = 2*i;
  int right = left + 1;
  int grandparent = i/2;

  if (i == 1)          return true;        // Reached the root
  if (left >= H->next) return true;        // No children
  if (right == H->next)                    // Left child only
    return ok_above(H, grandparent, left);
  return right < H->next                   // Both children
      && ok_above(H, grandparent, left)
      && ok_above(H, grandparent, right);
}


/****** Implementation ******/

bool pq_empty(heap* H)
//@requires is_heap(H);
{
  return H->next == 1;
}

bool pq_full(heap* H)
//@requires is_heap(H);
{
  return H->next == H->limit;
}

elem pq_peek(heap* H)
//@requires is_heap(H) && !pq_empty(H);
//@ensures  is_heap(H) && !pq_empty(H);
{
  return H->data[1];
}

heap* pq_new(int capacity, has_higher_priority_fn* prior, elem_print_fn* prnt)
//@requires 0 < capacity && capacity <= int_max()/2 - 1;
//@requires prior != NULL && prnt != NULL;
//@ensures is_heap(\result) && pq_empty(\result);
{
  heap* H  = alloc(heap);
  H->limit = capacity + 1;
  H->next  = 1;
  H->data  = alloc_array(elem, H->limit);
  H->prior = prior;
  H->print = prnt;
  return H;
}

void pq_add(heap* H, elem e)
//@requires is_heap(H) && !pq_full(H);
//@ensures  is_heap(H) && !pq_empty(H);
{
  H->data[H->next] = e;
  (H->next)++;
  //@assert is_heap_safe(H);    // basic invariants hold
  // but ordering invariant may be violated

  int i = H->next - 1;          // added element
  while (i > 1)  // sifting up
  //@loop_invariant 1 <= i && i < H->next;
  //@loop_invariant is_heap_except_up(H, i);
  //@loop_invariant grandparent_check(H, i);
  {
    int parent = i/2;
    if (ok_above(H, parent, i)) return; // No more violations

    swap_up(H, i);
    i = parent;
  }
  //@assert i == 1;
}

void sift_down(heap* H)
//@requires is_heap_safe(H);
//@requires H->next > 1 && is_heap_except_down(H, 1);
//@ensures is_heap(H);
{
  int i = 1;

  while (2*i < H->next)
  //@loop_invariant 1 <= i && i < H->next;
  //@loop_invariant is_heap_except_down(H, i);
  //@loop_invariant grandparent_check(H, i);
  {
    int left  = 2*i;
    int right = left+1;

    if (ok_above(H, i, left)                // All good on the left, and
        && (right >= H->next ||             // no right child or
            ok_above(H, i, right))) {       // all good on the right too
      // Nothing to do: invariant is restored already!
      return;
    } else if (right >= H->next ||          // No right child, or
               ok_above(H, left, right)) {  // left child is smaller or equal
      // We need to push the new element down to the left
      swap_up(H, left);
      i = left;
    } else {                                // right child is smaller
      //@assert right < H->next && ok_above(H, right, left);
      swap_up(H, right);
      i = right;
    }
  }
  //@assert i < H->next && 2*i >= H->next;
}


elem pq_rem(heap* H)
//@requires is_heap(H) && !pq_empty(H);
//@ensures  is_heap(H) && !pq_full(H);
{
  elem min = H->data[1];
  (H->next)--;

  if (H->next > 1) {
    H->data[1] = H->data[H->next];  // Swap last element in
    // Some useful properties (explored in homework) hold,
    // but ordering invariant may be violated
    sift_down(H);
  }
  return min;
}


void pq_print(heap* H)
//@requires is_heap(H);
{
  int l = 0;
  for (int i = 1; i < H->next; i++) {
    if (i == (1 << l)) {
      l++;
      if (i > 1) print(" | ");
    } else print(" ");
    elem e = H->data[i];
    (*H->print)(e);
  }
}

// Declare client-side type
typedef heap* pq_t;


/*********************/
/* Library interface */
/*********************/

// typedef ______* pq_t;

bool pq_empty(pq_t Q)
/*@requires Q != NULL; @*/ ;

bool pq_full(pq_t Q)
/*@requires Q != NULL; @*/ ;

pq_t pq_new(int capacity, has_higher_priority_fn* prior, elem_print_fn* prnt)
/*@requires capacity > 0 && prior != NULL && prnt != NULL; @*/
/*@ensures \result != NULL && pq_empty(\result); @*/ ;

void pq_add(pq_t Q, elem x)
/*@requires Q != NULL && !pq_full(Q); @*/
/*@ensures  !pq_empty(Q); @*/ ;

elem pq_rem(pq_t Q)
/*@requires Q != NULL && !pq_empty(Q); @*/
/*@ensures  !pq_full(Q); @*/ ;

elem pq_peek(pq_t Q)
/*@requires Q != NULL && !pq_empty(Q); @*/
/*@ensures !pq_empty(Q); @*/ ;

// bonus function
void pq_print(pq_t Q)
/*@requires Q != NULL; @*/ ;
