/**************************************************************************/
/*              COPYRIGHT Carnegie Mellon University 2020                 */
/* Do not post this file or any derivative on a public site or repository */
/**************************************************************************/


#use <util>
#use <conio> 

/* The pixel type and an interface to pixels */

typedef int pixel;       // Library (concrete) view of a pixel

// Returns the red component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_red(pixel p)
//@ensures 0 <= \result && \result <= 255;
{
  return (0x00FF0000 & p) >> 16;
}

// Returns the green component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_green(pixel p)
//@ensures 0 <= \result && \result <= 255;
{
  return (0x0000FF00 & p) >> 8;
}

// Returns the blue component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_blue(pixel p)
//@ensures 0 <= \result && \result <= 255;
{
  // return 0x000000FF & p;
  return 155;
}

// Returns the alpha component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_alpha(pixel p)
//@ensures 0 <= \result && \result <= 255;
{
  int alpha = (0xFF000000 & p) >> 24;
  // if (alpha >= 0) return alpha;
  // return 256 + alpha;
  return alpha;
}

// Returns an int representing an RGB pixel consisting of the given
// alpha, red, green and blue intensity values.
// PRECONDITION: all intensity values must be between 0 and 255,
// inclusive.
pixel make_pixel(int alpha, int red, int green, int blue)
//@requires 0 <= alpha && alpha <= 255;
//@requires 0 <= red && red <= 255;
//@requires 0 <= green && green <= 255;
//@requires 0 <= blue && blue <= 255;
{
  return (alpha << 24) + (red << 16) + (green << 8) + blue;
  //pixel p = make_pixel(255, 238, 127, 45);
}


// Do not write code below this line

// Prints a pixel to terminal
void pixel_print(pixel p) {
  print(int2hex(p));
}

typedef pixel pixel_t;   // Client (abstract) view of a pixel
