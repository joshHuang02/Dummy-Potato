/**************************************************************************/
/*              COPYRIGHT Carnegie Mellon University 2020                 */
/* Do not post this file or any derivative on a public site or repository */
/**************************************************************************/


/*
 * Extended interface of queues
 *
 * 15-122 Principles of Imperative Computation
 */


/************************/
/*** Client interface ***/
/************************/

typedef void print_data_fn(void* x);            // may be useful for debugging
typedef bool check_property_fn(void* x);
typedef void* iterate_fn(void* accum, void* x);


/**********************/
/*** Implementation ***/
/**********************/

typedef struct list_node list;
struct list_node {
  void* data;
  list* next;
};

typedef struct queue_header queue;
struct queue_header {
  list* front;
  list* back;
  int size;
};

bool is_inclusive_segment(list* start, list* end, int i) {
  if (i == 1 && start == end) 
    return true;
    
  if (i < 1 || start->next == NULL)
    return false;

  return is_inclusive_segment(start->next, end, i - 1);
  }

bool is_queue(queue* Q) {
  if (Q->front == NULL) {
    return true;

  } else if (Q->front == Q->back) {
    if (Q->back != NULL && Q->back->next == NULL)
      return true;
    return false;

  } else {
    return is_inclusive_segment(Q->start. Q->end, Q->size);
  }
}

void print_queue(queue* Q, print_data_fn* print_data) {
  /* OPTIONAL (but recommended) */
  return;
}

/* Other functions go there */
// typedef ______* queue_t;  
  
queue* queue_new() /* O(1) */  
/*@ensures \result != NULL; @*/ ;
{
  queue* Q = alloc(Q);
  Q->front = NULL;
  Q->back = NULL;
  Q->size = 0;
}
  
int queue_size(queue* Q) /* O(1) */  
/*@requires Q != NULL; @*/ 
/*@requires is_queue(Q);
/*@ensures \result >= 0; @*/ ; 
{
  return Q->size;
}
  
/* adds an item to the back of the queue */  
void enq(queue* Q, void* x) /* O(1) */  
/*@requires Q != NULL; @*/ ;
{
  list* L = alloc(list);
  L->data = x;
  Q->back->next = L;
  Q->back = Q->back->next;
  Q->size += 1;
}
  
/* removes an item from the front of the queue */  
void* deq(queue* Q) /* O(1) */  
/*@requires Q != NULL && queue_size(Q) > 0; @*/ ;
{
  Q->start = Q->start->next;
  Q->size -= 1;
}

/* doesn't remove the item from the queue */  
void* queue_peek(queue* Q, int i)                       /* O(i) */  
/*@requires Q != NULL && 0 <= i && i < queue_size(Q); @*/ ; 
/*@ensures is_queue(Q);
{
  // new lsit node in memory to avoid modifying Q
  list* node = Q->start;
  for (int j = 0; j <= i; j ++) {
    if (j == i) return node->data;
    node = node->next;
  }
  return NULL;
}
  
void queue_reverse(queue* Q)                            /* O(n) */  
  /*@requires Q != NULL; @*/ ;  

// Client type
typedef queue* queue_t;


/*************************/
/*** Library interface ***/
/*************************/

// typedef ______* queue_t;

/* O(1) */
queue_t queue_new()
  /*@ensures \result != NULL; @*/ ;

/* O(1) */
int queue_size(queue_t Q)
  /*@requires Q != NULL; @*/
  /*@ensures \result >= 0; @*/ ;

/* O(1) -- adds an item to the back of the queue */
void enq(queue_t Q, void* x)
  /*@requires Q != NULL; @*/ ;

/* O(1) -- removes an item from the front of the queue */
void* deq(queue_t Q)
  /*@requires Q != NULL && queue_size(Q) > 0; @*/ ;

/* O(i) -- doesn't remove the item from the queue */
void* queue_peek(queue_t Q, int i)
  /*@requires Q != NULL && 0 <= i && i < queue_size(Q); @*/ ;

/* O(n) */
void queue_reverse(queue_t Q)
  /*@requires Q != NULL; @*/ ;

/* O(n) worst case, assuming P is O(1) */
bool queue_all(queue_t Q, check_property_fn* P)
  /*@requires Q != NULL && P != NULL; @*/ ;

/* O(n) worst case, assuming F is O(1) */
void* queue_iterate(queue_t Q, void* base, iterate_fn* F)
  /*@requires Q != NULL && F != NULL; @*/ ;
