#use <conio>

int LF(int i, int j, int k)
//@requires 0 < j && j < k;
//@requires i >= 0;
{
  if (i < k) return i;

  int res = 0;
  res += LF(i - j, j, k);
  res += LF(i - k, j, k);
  return res;
}

bool is_memo_table(int[] M, int len, int j, int k)
//@requires 0 <= len && len < \length(M);
{
  for (int i = 0; i < len; i ++) {
    if ( !(M[i] == 0 || M[i] == LF(i, j, k))) {
      // printint(i);
      // flush();
      return false;
    }
  }
  return true;
}

int lf_memo(int[] M, int i, int j, int k)
//@requires 0 < j && j < k;
//@requires 0 <= i && i < \length(M);
//@requires is_memo_table(M, i, j, k);
//@ensures is_memo_table(M, i, j, k);
//@ensures \result == LF(i, j, k);
{
  if (i < k) return i;

  if (M[i] != 0) {
    return M[i];
  }

  int res = 0;
  res += lf_memo(M, i - j, j, k);
  res += lf_memo(M, i - k, j, k);
  M[i] = res;
  return res;
}

int fast_lf(int i, int j, int k)
//@requires 0 < j && j < k;
//@requires 0 <= i;
//@ensures \result == LF(i, j, k);
{
  int[]M = alloc_array(int, i + 1);

  return lf_memo(M, i, j, k);
}
