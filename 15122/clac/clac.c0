/**************************************************************************/
/*              COPYRIGHT Carnegie Mellon University 2020                 */
/* Do not post this file or any derivative on a public site or repository */
/**************************************************************************/


/*
 * Clac, stack-based calculator language
 *
 * 15-122 Principles of Imperative Computation
 */

#use <string>
#use <parse>
#use <conio>
#use <args>
#use <util>

/* From the perspective of the clac-main.c0 file, state_t is an
 * abstract type. (typedef ____* state_t) This file contains the
 * implementation of the state_t type. You will add new fields to this
 * struct when you do task 4. */
struct state_header {
  /* Nothing in here initially */
  dict_t defs;
  qstack_t calls;
};
typedef struct state_header* state_t;
state_t init_state()
//@ensures \result != NULL;
{
  state_t ST = alloc(struct state_header);
  ST->defs = dict_new();
  ST->calls = qstack_new();
  return ST;
}

// from lecture 1
int POW (int x, int y)
//@requires y >= 0;
{
  if (y == 0)
    return 1;
  else
    return x * POW(x, y-1);
}

/* Main clac interpreter. */
/* Return true: clac top-level interpreter will expect more input */
/* Return false: clac top-level interpreter will exit */
bool eval(queue_t Q, stack_t S, state_t ST)
//@requires Q != NULL && S != NULL && ST != NULL;
//@ensures \result == false || queue_empty(Q);
{
  while (!queue_empty(Q)) {
    string tok = deq(Q); /* Is this dequeue safe? */
    // Uncommenting these lines might help with debugging:
    // print("Read: "); print(tok); print("\n");
    if (string_equal(tok, "print")) {
      if (!stack_empty(S))
        printint(pop(S)); 
      else error("Not enough elements on stack!");
      print("\n");
      // int x = pop(S); /* This line is unsafe and must be fixed! */
      // printint(x); print("\n");
    } else if (string_equal(tok, "quit")) {
      return false;
    } else if (string_equal(tok, "+")) {
      int y = 0;
      if (!stack_empty(S)) 
        y = pop(S);
      else error("Not enough elements on stack!");

      if (!stack_empty(S)) 
        push(S, pop(S) + y); 
      else error("Not enough elements on stack!");
      
    } else if (string_equal(tok, "-")) {
      int y = 0;
      if (!stack_empty(S)) 
        y = pop(S);
      else error("Not enough elements on stack!");

      if (!stack_empty(S)) 
        push(S, pop(S) - y);
      else error("Not enough elements on stack!");
      
    } else if (string_equal(tok, "*")) {
      int y = 0;
      if (!stack_empty(S)) 
        y = pop(S);
      else error("Not enough elements on stack!");
        
      if (!stack_empty(S)) 
        push(S, pop(S) * y);
      else error("Not enough elements on stack!");

    } else if (string_equal(tok, "**")) {
      int y = 0;
      if (!stack_empty(S)) 
        y = pop(S);
      else error("Not enough elements on stack!");

      if(y < 0) error("Exponent cannot be negative!");
        
      if (!stack_empty(S)) 
        push(S, POW(pop(S), y));
      else error("Not enough elements on stack!");

    } else if (string_equal(tok, "/")) {
      int y = 0;
      int x = 0;
      if (!stack_empty(S)) 
        y = pop(S);
      else error("Not enough elements on stack!");
        
      if (!stack_empty(S)) 
        x = pop(S);
      else error("Not enough elements on stack!");

      if(y == 0 || (x == int_min() && y == -1))
        error("Failed divison safty check!");
      else
        push(S, x / y);

    } else if (string_equal(tok, "%")) {
      int y = 0;
      int x = 0;
      if (!stack_empty(S)) 
        y = pop(S);
      else error("Not enough elements on stack!");
        
      if (!stack_empty(S)) 
        x = pop(S);
      else error("Not enough elements on stack!");

      if(y == 0 || (x == int_min() && y == -1))
        error("Failed divison safty check!");
      else
        push(S, x % y);

    } else if (string_equal(tok, "<")) {
      int y = 0;
      int x = 0;
      if (!stack_empty(S)) 
        y = pop(S);
      else error("Not enough elements on stack!");
        
      if (!stack_empty(S)) 
        x = pop(S);
      else error("Not enough elements on stack!");

      if(x < y)
        push(S, 1);
      else
        push(S, 0);

    } else if (string_equal(tok, "drop")) {
      if (!stack_empty(S)) 
        pop(S);
      else error("Not enough elements on stack!");

    } else if (string_equal(tok, "swap")) {
      int y = 0;
      if (!stack_empty(S)) 
        y = pop(S);
      else error("Not enough elements on stack!");

      if (!stack_empty(S)) {
        int x = pop(S);
        push(S, y);
        push(S, x);
      } else error("Not enough elements on stack!");

    } else if (string_equal(tok, "rot")) {
      int[] zyx = alloc_array(int, 3);
      for (int i = 0; i < 3; i ++) {
        if (!stack_empty(S)) 
          zyx[i] = pop(S);
        else error("Not enough elements on stack!");
      }
      push(S, zyx[1]);
      push(S, zyx[0]);
      push(S, zyx[2]);

    } else if (string_equal(tok, "if")) {
      // if (!stack_empty(S) && pop(S) == 0) {
      bool notEmpty = !stack_empty(S);
      if (notEmpty && pop(S) == 0) {
        for (int i = 0; i < 3; i ++) {
          if (!queue_empty(Q))
            deq(Q);
          else error("Unexpected end of input!");
        } 
      }

    } else if (string_equal(tok, "pick")) {
      int n = 0;
      // check empty stack
      if (stack_empty(S)) error("Not enough elements on stack!");
      else {
        //@assert !stack_empty(S);
        n = pop(S);
        // check strictly positive
        if (n <= 0) error("Pick must be positive!");
        else {
          int[] pickArr = alloc_array(int, n);
          for (int i = 0; i < n; i ++) {
            if (!stack_empty(S))
              pickArr[i] = pop(S);
            else error("Not enough elements on stack!");
          }
          for (int j = n - 1; j >= 0; j --) 
            push(S, pickArr[j]);
          push(S, pickArr[n - 1]);
        }
      }

    } else if (string_equal(tok, "skip")) {
      int n = 0;
      if (stack_empty(S)) error("Not enough elements on stack!");
      else {
        //@assert !stack_empty(S);
        n = pop(S);
        if (n < 0) error("Pick must be positive!");
        else {
          for (int i = 0; i < n; i ++) {
            if (!queue_empty(Q))
              deq(Q);
            else error("Unexpected end of input!");
          }
        }
      }

    } else if (string_equal(tok, ":")) {
      // getting name
      string name = "";
      if (!queue_empty(Q))
        name = deq(Q);
      else error("Not enough elements on stack!");

      // getting queue of definitions
      queue_t defQ = queue_new();
      string operation = "";
      while (!string_equal(operation, ";")) {
        if (!queue_empty(Q))
          operation = deq(Q);
        else error("Unexpected end of input!");
        if (!string_equal(operation, ";"))
          enq(defQ, operation);
      }

      dict_insert(ST->defs, name, defQ);
      printf("(defined %s )\n", name);

    } else {
      /* Not defined as an operation name, should be an int */
      // unless its a custom definition!

      int* p = parse_int(tok, 10);
      if (p == NULL) { /* not an int */
        // stands for Read Only Def
        queue_t def = dict_lookup(ST->defs, tok);
        if (def != NULL) {
          queue_t callQueue = queue_new();
          while (!queue_empty(Q)) 
            enq(callQueue, deq(Q));
          //@assert queue_empty(Q);

          qpush(ST->calls, callQueue);

          queue_t defCopy = queue_new();
          while(!queue_empty(def)) {
            string temp = deq(def);
            enq(Q, temp);
            enq(defCopy, temp);
          }
          //@assert queue_empty(def);

          dict_insert(ST->defs, tok, defCopy);

        } else
          /* call error(msg) which prints msg and aborts */
          error(string_join("undefined token ", tok));

        
      } else 
        push(S, *p);
    }

    if (queue_empty(Q)){
      while (!qstack_empty(ST->calls)) {
      // qstack_print(ST->calls);
        queue_t callQ = qpop(ST->calls);
        while (!queue_empty(callQ))
          enq(Q, deq(callQ));
      }
    }
  }

  /* When you return "true", don't pop anything off the stack! When we
   * grade your function, we'll check that the stack contains the
   * integers we expect. */
  return true;
}
