/**************************************************************************/
/*              COPYRIGHT Carnegie Mellon University 2020                 */
/* Do not post this file or any derivative on a public site or repository */
/**************************************************************************/


// Allows you to use I/O functions like print and println
#use <conio>
// Allows you to use string functions like string_join
#use <string>
// Allows you to use utility functions like abs() and min()
#use <util>

bool is_substring(string little, string big) {
  int len = string_length(little);
  int offset = string_length(big) - len;
  while (offset >= 0)
  //@loop_invariant offset <= string_length(big) - string_length(little);
  {
    if (string_equal(little, string_sub(big, offset, offset+len))) return true;
    offset--;
  }
  return false;
}

int f(string s1, string s2)
//@ensures 0 <= \result && \result <= string_length(s1);
//@ensures 0 <= \result && \result <= string_length(s2);
//@ensures string_equal(string_sub(s1, 0, \result), string_sub(s2, 0, \result));
/*@ensures \result == string_length(s1)
  @     || \result == string_length(s2)
  @     || string_charat(s1, \result) != string_charat(s2, \result); @*/
{
  if (string_equal(s1, s2) && string_length(s1) != 0) {
    // return 3;
    return string_length(s1);
  }

  string smol = "";
  string big = "";
  if (string_length(s1) > string_length(s2)) {
    smol = s2;
    big = s1;
  } else {
    smol = s1;
    big = s2;
  }

  if (is_substring(smol, big)) return string_length(smol);

  for (int i = 1; i < string_length(smol); i ++) {
    if (string_equal(string_sub(s1, 0, i), string_sub(s2, 0, i)) && string_charat(s1, i) != string_charat(s2, i)) {
      println(string_fromint(i));
      return i;
    }
  }

  println("0");
  return 0;
}

int g(string s)
//@requires string_length(s) > 0;
//@requires string_charat(s, 0) != string_charat(s, string_length(s) - 1);
//@ensures 0 <= \result && \result < string_length(s)-1;
//@ensures string_charat(s, \result) == string_charat(s, 0);
//@ensures string_charat(s, \result+1) != string_charat(s, 0);
{
  int target = 0;
  char firstChar = string_charat(s, 0);
  for (int i = 0; i < string_length(s) - 1; i ++) {
    if (string_charat(s, i) == firstChar && string_charat(s, i + 1) != firstChar) {
      return i;
    }
  }
  return 0;
}

string h(string s)
//@ensures is_substring(\result, s);
/*@ensures string_length(s) < 128
  @     || (string_length(\result) > 1
  @         && string_charat(\result, 0)
  @            == string_charat(\result, string_length(\result) - 1)); @*/
{
  char[] existing = alloc_array(char, string_length(s));

  for (int i = 0; i < string_length(s); i ++) {
    existing[i] = string_charat(s, i);
    for (int j = 0; j < i; j++) {
      if (string_charat(s, i) == existing[j]) {
        println(string_sub(s, j, i + 1));
        return string_sub(s, j, i + 1);
      }
    }
  }
  println("BLANK");
  return "";
}




/**************** DO NOT CHANGE THE CODE BELOW THIS LINE ********************/

int f(string s1, string s2)
/*@ensures 0 <= \result && \result <= string_length(s1);                   @*/
/*@ensures 0 <= \result && \result <= string_length(s2);                   @*/
/*@ensures string_equal(string_sub(s1, 0, \result),
  @                     string_sub(s2, 0, \result));                       @*/
/*@ensures \result == string_length(s1)
  @     || \result == string_length(s2)
  @     || string_charat(s1, \result) != string_charat(s2, \result);       @*/ ;

int g(string s)
/*@requires string_length(s) > 0;                                          @*/
/*@requires string_charat(s, 0) != string_charat(s, string_length(s) - 1); @*/
/*@ensures 0 <= \result && \result < string_length(s)-1;                   @*/
/*@ensures string_charat(s, \result) == string_charat(s, 0);               @*/
/*@ensures string_charat(s, \result+1) != string_charat(s, 0);             @*/ ;

string h(string s)
/*@ensures is_substring(\result, s);                                       @*/
/*@ensures string_length(s) < 128
  @     || (string_length(\result) > 1
  @         && string_charat(\result, 0)
  @            == string_charat(\result, string_length(\result) - 1));     @*/ ;
