/**************************************************************************/
/*              COPYRIGHT Carnegie Mellon University 2020                 */
/* Do not post this file or any derivative on a public site or repository */
/**************************************************************************/


/* Utility functions for working with arrays of strings
 * Mostly specification functions, but swap is effectful
 *
 * 15-122 Principles of Imperative Computation */

#use <string>
#use <conio>

/*** Interface ***/

/* is_in: x in A[lo,hi) */
bool is_in(string x, string[] A, int lo, int hi)
/*@requires 0 <= lo  && lo <= hi && hi <= \length(A); @*/ ;

/* is_sorted: A[lo,hi) SORTED */
bool is_sorted(string[] A, int lo, int hi)
/*@requires 0 <= lo  && lo <= hi && hi <= \length(A); @*/ ;

/* no_dupes: A[lo, hi) does not contain duplicates */
bool no_dupes(string[] A, int lo, int hi)
/*@requires 0 <= lo && lo <= hi && hi <= \length(A); @*/ ;

/* swap(A, i, j) has the effect of switching A[i] and A[j] */
void swap(string[] A, int i, int j)
/*@requires 0 <= i && i < \length(A) && 0 <= j && j < \length(A); @*/ ;


/* gt_seg: x > A[lo,hi) */
bool gt_seg(string x, string[] A, int lo, int hi)
/*@requires 0 <= lo && lo <= hi && hi <= \length(A); @*/ ;

/* ge_seg: x >= A[lo,hi) */
bool ge_seg(string x, string[] A, int lo, int hi)
/*@requires 0 <= lo && lo <= hi && hi <= \length(A); @*/ ;

/* lt_seg: x < A[lo,hi) */
bool lt_seg(string x, string[] A, int lo, int hi)
/*@requires 0 <= lo && lo <= hi && hi <= \length(A); @*/ ;

/* le_seg: x <= A[lo,hi) */
bool le_seg(string x, string[] A, int lo, int hi)
/*@requires 0 <= lo && lo <= hi && hi <= \length(A); @*/ ;


/* gt_segs: A[lo1,hi1) > B[lo2,hi2) */
bool gt_segs(string[] A, int lo1, int hi1,
             string[] B, int lo2, int hi2)
/*@requires 0 <= lo1 && lo1 <= hi1 && hi1 <= \length(A); @*/
/*@requires 0 <= lo2 && lo2 <= hi2 && hi2 <= \length(B); @*/ ;

/* ge_segs: A[lo1,hi1) >= B[lo2,hi2) */
bool ge_segs(string[] A, int lo1, int hi1,
             string[] B, int lo2, int hi2)
/*@requires 0 <= lo1 && lo1 <= hi1 && hi1 <= \length(A); @*/
/*@requires 0 <= lo2 && lo2 <= hi2 && hi2 <= \length(B); @*/ ;

/* lt_segs: A[lo1,hi1) < B[lo2,hi2) */
bool lt_segs(string[] A, int lo1, int hi1,
             string[] B, int lo2, int hi2)
/*@requires 0 <= lo1 && lo1 <= hi1 && hi1 <= \length(A); @*/
/*@requires 0 <= lo2 && lo2 <= hi2 && hi2 <= \length(B); @*/ ;

/* le_segs: A[lo1,hi1) <= B[lo2,hi2) */
bool le_segs(string[] A, int lo1, int hi1,
             string[] B, int lo2, int hi2)
/*@requires 0 <= lo1 && lo1 <= hi1 && hi1 <= \length(A); @*/
/*@requires 0 <= lo2 && lo2 <= hi2 && hi2 <= \length(B); @*/ ;

/* print_seg: prints A[lo, hi) */
void print_seg(string[]A, int lo, int hi)
/*@requires 0 <= lo && lo <= hi && hi <= \length(A); @*/ ;


/*** Implementation ***/

bool is_in(string x, string[] A, int lo, int hi)
/*@requires 0 <= lo && lo <= hi && hi <= \length(A); @*/
{
  for (int i = lo; i < hi; i++)
  //@loop_invariant lo <= i && i <= hi;
  {
    if (string_equal(x, A[i])) return true;
  }
  return false;
}

bool is_sorted(string[] A, int lo, int hi)
/*@requires 0 <= lo && lo <= hi && hi <= \length(A); @*/
{
  for(int i = lo; i < hi-1; i++)
  //@loop_invariant lo <= i;
  {
    if(!(string_compare(A[i+1], A[i]) >= 0)) return false;
  }
  return true;
}

bool no_dupes(string[] A, int lo, int hi)
//@requires 0 <= lo && lo <= hi && hi <= \length(A);
{
  for (int i = lo; i < hi; i++)
  //@loop_invariant 0 <= i && i <= hi;
  {
    for (int j = i+1; j < hi; j++)
    //@loop_invariant i+1 <= j && j <= hi;
    {
      if (string_equal(A[j],A[i]))  // found duplicate
          return false;
    }
  }
  return true;
}

void swap(string[] A, int i, int j)
//@requires 0 <= i && i < \length(A);
//@requires 0 <= j && j < \length(A);
{
  string tmp = A[i];
  A[i] = A[j];
  A[j] = tmp;
}

bool gt_seg(string x, string[] A, int lo, int hi)
/*@requires 0 <= lo && lo <= hi && hi <= \length(A); @*/
{
  for (int i = lo; i < hi; i++)
  //@loop_invariant lo <= i && i <= hi;
  {
    if (!(string_compare(x, A[i]) > 0)) return false;
  }
  return true;
}

bool ge_seg(string x, string[] A, int lo, int hi)
/*@requires 0 <= lo && lo <= hi && hi <= \length(A); @*/
{
  for (int i = lo; i < hi; i++)
  //@loop_invariant lo <= i && i <= hi;
  {
    if (!(string_compare(x, A[i]) >= 0)) return false;
  }
  return true;
}

bool lt_seg(string x, string[] A, int lo, int hi)
/*@requires 0 <= lo && lo <= hi && hi <= \length(A); @*/
{
  for (int i = lo; i < hi; i++)
  //@loop_invariant lo <= i && i <= hi;
  {
    if (!(string_compare(x, A[i]) < 0)) return false;
  }
  return true;
}

bool le_seg(string x, string[] A, int lo, int hi)
/*@requires 0 <= lo && lo <= hi && hi <= \length(A); @*/
{
  for (int i = lo; i < hi; i++)
  //@loop_invariant lo <= i && i <= hi;
  {
    if (!(string_compare(x, A[i]) <= 0)) return false;
  }
  return true;
}

bool gt_segs(string[] A, int lo1, int hi1,
             string[] B, int lo2, int hi2)
//@requires 0 <= lo1 && lo1 <= hi1 && hi1 <= \length(A);
//@requires 0 <= lo2 && lo2 <= hi2 && hi2 <= \length(B);
{
  for (int i = lo1; i < hi1; i++)
    //@loop_invariant 0 <= lo1 && lo1 <= hi1;
    for (int j = lo2; j < hi2; j++)
      //@loop_invariant 0 <= lo2 && lo2 <= hi2;
      if (!(string_compare(A[i], B[j]) > 0)) return false;
  return true;
}

bool ge_segs(string[] A, int lo1, int hi1,
             string[] B, int lo2, int hi2)
//@requires 0 <= lo1 && lo1 <= hi1 && hi1 <= \length(A);
//@requires 0 <= lo2 && lo2 <= hi2 && hi2 <= \length(B);
{
  for (int i = lo1; i < hi1; i++)
    //@loop_invariant 0 <= lo1 && lo1 <= hi1;
    for (int j = lo2; j < hi2; j++)
      //@loop_invariant 0 <= lo2 && lo2 <= hi2;
      if (!(string_compare(A[i], B[j]) >= 0)) return false;
  return true;
}

bool lt_segs(string[] A, int lo1, int hi1,
             string[] B, int lo2, int hi2)
//@requires 0 <= lo1 && lo1 <= hi1 && hi1 <= \length(A);
//@requires 0 <= lo2 && lo2 <= hi2 && hi2 <= \length(B);
{
  for (int i = lo1; i < hi1; i++)
    //@loop_invariant 0 <= lo1 && lo1 <= hi1;
    for (int j = lo2; j < hi2; j++)
      //@loop_invariant 0 <= lo2 && lo2 <= hi2;
      if (!(string_compare(A[i], B[j]) < 0)) return false;
  return true;
}

bool le_segs(string[] A, int lo1, int hi1,
             string[] B, int lo2, int hi2)
//@requires 0 <= lo1 && lo1 <= hi1 && hi1 <= \length(A);
//@requires 0 <= lo2 && lo2 <= hi2 && hi2 <= \length(B);
{
  for (int i = lo1; i < hi1; i++)
    //@loop_invariant 0 <= lo1 && lo1 <= hi1;
    for (int j = lo2; j < hi2; j++)
      //@loop_invariant 0 <= lo2 && lo2 <= hi2;
      if (!(string_compare(A[i], B[j]) <= 0)) return false;
  return true;
}

void print_seg(string[]A, int lo, int hi)
/*@requires 0 <= lo && lo <= hi && hi <= \length(A); @*/
{
  print("array["); printint(lo);
  print(","); printint(hi);
  print(") = [");
  for (int i = lo; i < hi; i++)
  //@loop_invariant lo <= i && i <= hi;
  {
    print(A[i]);
    if (i != hi-1) print(", ");
  }
  print("]");
}
