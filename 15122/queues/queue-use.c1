bool even(void* x)
//@requires \hastag(int*, x);
{
	if (x == NULL) return false;
	int num = *(int*)x;
	return num >= 0 && num % 2 == 0;
}

bool odd(void* x)
//@requires \hastag(int*, x);
{
	if (x == NULL) return true;
	int num = *(int*)x;
	return num >= 0 && num % 2 == 1;
}

bool incr(void* x)
//@requires \hastag(int*, x);
{
	if (x == NULL) return true;

	*(int*)x += 1;
	return true;
}

void* find_negative(void* accum, void* x) 
//@requires \hastag(int*, accum);
//@requires \hastag(int*, x);
{
	if (x == NULL) return NULL;
	//@assert x != NULL;
	int* b = (int*)x;
	if (accum == NULL && *b < 0) {
		int* negative = alloc(int);
		*negative = *b; 
		accum = (void*)negative;
		//@assert accum != NULL;
	}
	return accum;
}

void* copy(void* accum, void* x) 
//@requires accum != NULL;
//@requires \hastag(queue_t, accum);
// //@requires \hastag(int*, x);
//@ensures \hastag(queue_t, \result);
{
	enq((queue_t)accum, x);
	return accum;
}

void* insert(void* accum, void* x) 
//@requires accum != NULL && x != NULL;
//@requires \hastag(int*, accum);
//@requires \hastag(int*, x);
{
	int* a = (int*)accum;
	int* b = (int*)x;
	if (*b > *a) {
		int temp = *a;
		*a = *b;
		*b = temp;
	}

	return accum;
}

queue_t insertion_sort(queue_t Q) {
  queue_t R = queue_new();  
  while (queue_size(Q) > 0) {  
      int* p1 = alloc(int);  
      void* p2 = deq(Q);  
      //@assert p2 != NULL && \hastag(int*, p2);  
      *p1 = *(int*)p2;  
      queue_iterate(R, (void*)p1, &insert);  
      enq(R,(void*)p1);  
  }
  return R;
}