/*
 * Generic Stacks
 *
 * 15-122 Principles of Imperative Computation */

/*** Interface to generic stacks ***/

typedef struct stack_header* stack_t;
typedef void* stackelem;

bool stack_empty(stack_t S)       /* O(1) */
  /*@requires S != NULL; @*/;

stack_t stack_new()               /* O(1) */
  /*@ensures \result != NULL; @*/
  /*@ensures stack_empty(\result); @*/;

void push(stack_t S, stackelem x)       /* O(1) */

  /*@requires S != NULL; @*/;

stackelem pop(stack_t S)                /* O(1) */
  /*@requires S != NULL; @*/
  /*@requires !stack_empty(S); @*/;


/*** Implementation of generic stacks ***/

/* Aux structure of linked lists of strings */
typedef struct list_node list;
struct list_node {
  stackelem data;
  list* next;
};

/* is_segment_list(start, end) will diverge if list is circular! */
bool is_segment_list(list* start, list* end) {
  if (start == NULL) return false;
  if (start == end) return true;
  return is_segment_list(start->next, end);
}

/* Generic Stacks */

typedef struct stack_header stack;
struct stack_header {
  list* top;
  list* bottom;
};

bool is_stack(stack* S) {
  return S != NULL
    && is_segment_list(S->top, S->bottom);
}

bool stack_empty(stack* S)
//@requires is_stack(S);
{
  return S->top == S->bottom;
}

stack* stack_new()
//@ensures is_stack(\result);
//@ensures stack_empty(\result);
{
  stack* S = alloc(stack);
  list* l = alloc(list); /* does not need to be initialized! */
  S->top = l;
  S->bottom = l;
  return S;
}

void push(stack* S, stackelem x)
//@requires is_stack(S);
//@ensures is_stack(S);
{
  list* l = alloc(list);
  l->data = x;
  l->next = S->top;
  S->top = l;
}

stackelem pop(stack* S)
//@requires is_stack(S);
//@requires !stack_empty(S);
//@ensures is_stack(S);
{
  stackelem x = S->top->data;
  S->top = S->top->next;
  return x;
}
