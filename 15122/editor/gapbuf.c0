/**************************************************************************/
/*              COPYRIGHT Carnegie Mellon University 2020                 */
/* Do not post this file or any derivative on a public site or repository */
/**************************************************************************/


/*
 * Gap Buffers
 *
 * A gap buffer data structure is represented by an array of chars
 * stored along with its size (limit) and two integers representing
 * the beginning (inclusive, gap start) and end (exclusive, gap end)
 * of the gap.
 *
 * 15-122 Principles of Imperative Computation */

#use <string>

typedef struct gapbuf_header gapbuf;
typedef gapbuf* elem; // The data in the linked lists are gap buffers

/*** Interface (DO NOT CHANGE) ***/

struct gapbuf_header {
  int limit;     /* limit > 0                      */
  char[] buffer; /* \length(buffer) == limit       */
  int gap_start; /* 0 <= gap_start                 */
  int gap_end;   /* gap_start  <= gap_end <= limit */
};

bool is_gapbuf(gapbuf* G);

bool gapbuf_empty(gapbuf* G);    /* Returns true if the buffer is empty */
bool gapbuf_full(gapbuf* G);     /* Returns true if the buffer is full  */
bool gapbuf_at_left(gapbuf* G);  /* Returns true if the gap is at the   */
                                 /*   left end of the buffer            */
bool gapbuf_at_right(gapbuf* G); /* Returns true if the gap is at the   */
                                 /*   right end of the buffer           */

gapbuf* gapbuf_new(int limit);   /* Create a new gapbuf of size limit   */
void gapbuf_forward(gapbuf* G);  /* Move the gap forward, to the right  */
void gapbuf_backward(gapbuf* G); /* Move the gap backward, to the left  */
void gapbuf_insert(gapbuf* G, char c); /* Insert char c before the gap  */
void gapbuf_delete(gapbuf* G);   /* Delete the char before the gap      */


/*** Implementation (include contracts here) ***/

// Task 1
// helper to check limit is array length
bool correct_limit_length(gapbuf* G)
//@requires G->limit == \length(G->buffer);
{
  return true;
}

bool is_gapbuf(gapbuf* G) 
{
  return G != NULL && 0 < G->limit && correct_limit_length(G)
        && 0 <= G->gap_start
        && G->gap_start <= G->gap_end 
        && G->gap_end <= G->limit;
}

// Task 2
bool gapbuf_empty(gapbuf* G)
//@requires is_gapbuf(G);
{
  return G->gap_start == 0 && G->gap_end == G->limit;
}

bool gapbuf_full(gapbuf* G)
//@requires is_gapbuf(G);
{
  return G->gap_start == G->gap_end;
}

bool gapbuf_at_right(gapbuf* G)
//@requires is_gapbuf(G);
{
  return G->gap_end == G->limit;

}

bool gapbuf_at_left(gapbuf* G)
//@requires is_gapbuf(G);
{
  return G->gap_start == 0;
}

// Task 3: operating functions
gapbuf* gapbuf_new(int limit)
//@requires 0 < limit;
//@ensures is_gapbuf(\result);
//@ensures gapbuf_empty(\result);
{
  gapbuf* G = alloc(struct gapbuf_header);
  G->limit = limit;
  G->buffer = alloc_array(char, limit);
  G->gap_start = 0;
  G->gap_end = limit;
  // idk if I need this assertion here but the document said use assertions
  //@assert gapbuf_empty(G);
  return G;
}

void gapbuf_forward(gapbuf* G)
//@requires is_gapbuf(G);
//@requires !gapbuf_at_right(G);
//@ensures is_gapbuf(G);
{
  G->buffer[G->gap_start] = G->buffer[G->gap_end];
  G->gap_start += 1;
  G->gap_end += 1;
}

void gapbuf_backward(gapbuf* G)
//@requires is_gapbuf(G);
//@requires !gapbuf_at_left(G);
//@ensures is_gapbuf(G);
{
  G->buffer[G->gap_end - 1] = G->buffer[G->gap_start - 1];
  G->gap_start -= 1;
  G->gap_end -= 1;
}

void gapbuf_insert(gapbuf* G, char c)
//@requires is_gapbuf(G);
//@requires !gapbuf_full(G);
//@ensures is_gapbuf(G);
{
  G->buffer[G->gap_start] = c;
  G->gap_start += 1;
}

void gapbuf_delete(gapbuf* G)
//@requires is_gapbuf(G);
//@requires !gapbuf_at_left(G);
//@ensures is_gapbuf(G);
{
  G->gap_start -= 1;
}