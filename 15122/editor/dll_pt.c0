/**************************************************************************/
/*              COPYRIGHT Carnegie Mellon University 2020                 */
/* Do not post this file or any derivative on a public site or repository */
/**************************************************************************/
#use <conio>
#use <string>

/*
 * Doubly linked lists with point
 *
 * A text buffer is a doubly linked list (dll), where one of the
 * elements in the dll is designated as containing the point.  The
 * list is terminated on both ends with dummy nodes whose contents are
 * never inspected.
 *
 * 15-122 Principles of Imperative Computation */

/*** Interface (DO NOT CHANGE) ***/

typedef struct dll_node dll;
struct dll_node {
  elem data; /* This is defined elsewhere (gapbuf.c0 or elem-char.c0) */
  dll* next;
  dll* prev;
};

typedef struct dll_pt_header dll_pt;
struct dll_pt_header {
  dll* start; /* the first node of the list (to the left)  */
  dll* point; /* the current node of the list (where the cursor is) */
  dll* end;   /* the last node of the list (to the right) */
};

bool is_dll_pt(dll_pt* B);

bool dll_pt_at_left(dll_pt* B);  /* Returns true if the point is first  */
                                 /*   first (non-terminal) node         */
bool dll_pt_at_right(dll_pt* B); /* Returns true if the point is last   */
                                 /*   last (non-terminal) node          */

void dll_pt_forward(dll_pt* B);  /* Moves the point forward (right)     */
void dll_pt_backward(dll_pt* B); /* Moves the point backward (left)     */
void dll_pt_delete(dll_pt* B);   /* Remove the current point            */


/*** Implementation (include contracts here) ***/
/* Helper for is_dll_pt
   checks if the current and next node have mirrored next and prev
*/

bool is_dll_segment(dll* a, dll* b)
{
  if (a->next != b||b->prev != a||a->next->prev != a||b->prev->next != b) 
    return false;
  return true;
}

bool is_dll_pt(dll_pt* B)
{
  if (B == NULL) return false;
  if (B->start == NULL) return false;
  // check is B has the point between start and end
  bool hasPoint = false;
  dll* a = B->start;
  // check for any NULL in dll
  while (a != B->end) {
    if (a == NULL || a->next == NULL) return false;
    a = a->next;
  }
  a = B->start;

  // loop through from start to end
  while (a->next != B->end) {
    if ( !is_dll_segment(a, a->next)) return false;
    if ( a->next == B->point) hasPoint = true;
    a = a->next;
  }
  
  // by previous if statement and loop guard, only B->end is not checked
  if (!is_dll_segment(B->end->prev, B->end)) return false;
  // at this point the segment is correct, check hasPoint
  return hasPoint;
}

bool dll_pt_at_left(dll_pt* B)
//@requires is_dll_pt(B);
{
  return B->start->next == B->point;
}

bool dll_pt_at_right(dll_pt* B)
//@requires is_dll_pt(B);
{
  return B->end->prev == B->point;
}

void dll_pt_forward(dll_pt* B)
//@requires is_dll_pt(B);
//@requires !dll_pt_at_right(B);
//@ensures is_dll_pt(B);
{
  B->point = B->point->next;
}

void dll_pt_backward(dll_pt* B)
//@requires is_dll_pt(B);
//@requires !dll_pt_at_left(B);
//@ensures is_dll_pt(B);
{
  B->point = B->point->prev;
}

void dll_pt_delete(dll_pt* B)
//@requires is_dll_pt(B);
//@requires !(dll_pt_at_left(B) && dll_pt_at_right(B));
//@requires is_dll_pt(B);
{
  dll* rmPoint = B->point;
  // change "next" field of point->prev to point->next
  rmPoint->prev->next = rmPoint->next;
  // change "prev" field of point->next to point->prev
  rmPoint->next->prev = rmPoint->prev;

  // at this point the target point node has been removed from list
  if (rmPoint->prev == B->start ) {
    B->point = rmPoint->next;
  } else {
    B->point = rmPoint->prev;
  }
}