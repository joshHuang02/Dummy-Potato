/**************************************************************************/
/*              COPYRIGHT Carnegie Mellon University 2020                 */
/* Do not post this file or any derivative on a public site or repository */
/**************************************************************************/


/* Example of some unit tests for remove-blue.c0 */

#use <conio>
#use <util>

// We could put preconditions on this function (0 <= alpha < 256 and
// so on), but it's not necessary for safety.
void assert_pixels_eq(pixel_t p, int alpha, int red, int green, int blue) {
    assert(get_alpha(p) == alpha);
    assert(get_red(p) == red);
    assert(get_green(p) == green);
    assert(get_blue(p) == blue);
}

int main() {
    pixel_t[] A;
    pixel_t[] B;

    /*** Test 1 - edge case (1x1) ***/

    // Initialize A, run remove_blue();
    A = alloc_array(pixel_t, 1);
    A[0] = make_pixel(0xFF, 0x01, 0x03, 0x04);
    B = remove_blue(A, 1, 1);

    // Is A unchanged?
    assert_pixels_eq(A[0], 0xFF, 0x01, 0x03, 0x04);

    // Is B correct?
    assert_pixels_eq(B[0], 0xFF, 0x01, 0x03, 0x00);

    /*** Test 2 - small non-edge case (2x2) ***/

    // Initialize A, run remove_blue();
    A = alloc_array(pixel_t, 4);
    A[0] = make_pixel(0x02, 0x00, 0xFF, 0xEE);
    A[1] = make_pixel(0xFF, 0xFF, 0xFF, 0xFF);
    A[2] = make_pixel(0x00, 0x00, 0x00, 0x00);
    A[3] = make_pixel(0x00, 0xAA, 0xBB, 0xCC);
    B = remove_blue(A, 2, 2);

    // Is A unchanged?
    assert_pixels_eq(A[0], 0x02, 0x00, 0xFF, 0xEE);
    assert_pixels_eq(A[1], 0xFF, 0xFF, 0xFF, 0xFF);
    assert_pixels_eq(A[2], 0x00, 0x00, 0x00, 0x00);
    assert_pixels_eq(A[3], 0x00, 0xAA, 0xBB, 0xCC);

    // Is B correct?
    assert_pixels_eq(B[0], 0x02, 0x00, 0xFF, 0x00);
    assert_pixels_eq(B[1], 0xFF, 0xFF, 0xFF, 0x00);
    assert_pixels_eq(B[2], 0x00, 0x00, 0x00, 0x00);
    assert_pixels_eq(B[3], 0x00, 0xAA, 0xBB, 0x00);

    /*** Other edge cases to consider: 1x3 image, 3x1 image ***/
    A = alloc_array(pixel_t, 3);
    A[0] = make_pixel(0x02, 0x00, 0xFF, 0xEE);
    A[1] = make_pixel(0xFF, 0xFF, 0xFF, 0xFF);
    A[2] = make_pixel(0x00, 0x00, 0x00, 0x00);
    B = remove_blue(A, 1, 3);

    assert_pixels_eq(A[0], 0x02, 0x00, 0xFF, 0xEE);
    assert_pixels_eq(A[1], 0xFF, 0xFF, 0xFF, 0xFF);
    assert_pixels_eq(A[2], 0x00, 0x00, 0x00, 0x00);
    assert_pixels_eq(B[0], 0x02, 0x00, 0xFF, 0x00);
    assert_pixels_eq(B[1], 0xFF, 0xFF, 0xFF, 0x00);
    assert_pixels_eq(B[2], 0x00, 0x00, 0x00, 0x00);

    A = alloc_array(pixel_t, 3);
    A[0] = make_pixel(0x02, 0x00, 0xFF, 0xEE);
    A[1] = make_pixel(0xFF, 0xFF, 0xFF, 0xFF);
    A[2] = make_pixel(0x00, 0x00, 0x00, 0x00);
    B = remove_blue(A, 3, 1);

    assert_pixels_eq(A[0], 0x02, 0x00, 0xFF, 0xEE);
    assert_pixels_eq(A[1], 0xFF, 0xFF, 0xFF, 0xFF);
    assert_pixels_eq(A[2], 0x00, 0x00, 0x00, 0x00);
    assert_pixels_eq(B[0], 0x02, 0x00, 0xFF, 0x00);
    assert_pixels_eq(B[1], 0xFF, 0xFF, 0xFF, 0x00);
    assert_pixels_eq(B[2], 0x00, 0x00, 0x00, 0x00);

    // End Testing

    printf("All tests passed!\n");

    return 0;
}
