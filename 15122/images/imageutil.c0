/**************************************************************************/
/*              COPYRIGHT Carnegie Mellon University 2020                 */
/* Do not post this file or any derivative on a public site or repository */
/**************************************************************************/


#use <util>
#use <conio>
#use <string>

// Checks that width and height are valid dimensions. To be valid
// dimensions, width and height must be strictly positive, and
// the product width*height must not cause overflow.
bool is_valid_imagesize(int width, int height)
{
  return width > 0
    && height > 0
    && width <= int_max() / height;
}

// Returns the row number of a pixel in an image of size width*
// height stored as a one-dimensional array given the index of the
// pixel in the one-dimensional array.
// PRECONDITION: width and height are valid dimensions and index is
// in-bounds for an array of length width*height.
// POSTCONDITION: returned value is between 0 (inclusive) and height
// (exclusive).
int get_row(int index, int width, int height)
//@requires is_valid_imagesize(width, height);
//@requires 0 <= index && index < (width * height);
//@ensures 0 <= \result && \result < height;
{
    return index / width;
}

// Returns the column number of a pixel in an image of size width*
// height stored as a one-dimensional array given the index of the
// pixel in the one-dimensional array.
// PRECONDITION: width and height are valid dimensions and index is
// in-bounds for an array of length width*height.
// POSTCONDITION: returned value is between 0 (inclusive) and width
// (exclusive).
int get_column(int index, int width, int height)
//@requires is_valid_imagesize(width, height);
//@requires 0 <= index && index < (width * height);
//@ensures 0 <= \result && \result < width;
{
    return index % width;
}

// Given a width and height that are valid for an image, returns true
// if the given row and column represent a valid pixel location in an
// image of size width*height and false otherwise.
// PRECONDITION: width and height are valid dimensions
bool is_valid_pixel(int row, int col, int width, int height)
//@requires is_valid_imagesize(width, height);
{
    if ( !(0 <= row && row < height)) return false;
    if ( !(0 <= col && col < width)) return false;
    return true;
}

// Returns the index of a pixel in a one-dimensional array of pixels
// representing a two-dimensional image of size width*height, given
// the row and column of the pixel in the two-dimensional image.
// PRECONDITION: width and height are valid dimensions
// PRECONDITION: (row, col) is a valid pixel for an image of that
// width and height
// POSTCONDITION: returned value is in-bounds for an array of length
// width*height.
int get_index(int row, int col, int width, int height)
//@requires is_valid_imagesize(width, height);
//@requires is_valid_pixel(row, col, width, height);
//@ensures 0 <= \result && \result < (width * height);
{
    return row * width + col;
}


// Prints the pixels of the input image: use only for small images
// PRECONDITION: width and height are valid dimensions
// PRECONDITION: width*height is the size of the array
void image_print(pixel_t[] A, int width, int height)
//@requires is_valid_imagesize(width, height);
//@requires \length(A) == width * height;
{
  if (width > 10 || height > 10) {
    printf("print_image is not a useful debugging tool for large images\n");
    printf("type 'y' to proceed nonetheless, ");
    printf("and anything else to skip printing: ");
    string s = readline();
    if (!(string_equal(s, "y") || string_equal(s, "Y")))
      return;
  }
  for (int row = 0; row < height; row++)
    {
      for (int col = 0; col < width; col++)
        {
          pixel_print(A[get_index(row, col, width, height)]);
          print(" ");
        }
      printf("\n");
    }
}
